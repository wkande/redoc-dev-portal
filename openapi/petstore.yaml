openapi: 3.0.3
servers:
  - url: '//petstore.swagger.io/v2'
info:
  description: >-
    You placed your server equipment in our Datacenter under our care. We thank you and take this 
    responsiblity seriously. Our APIs will help you monitor your equipment and us: CloudUla.
     
    CloudUla provides a set of APIs to access Datacenter stats, metrics and other important 
    information about your CloudUla Datacenter managed equipment.  You can find out more about 
    us at 
    <a href="javascript:alert('Remember that CloudUla fictitious thing?')">
    www.cloudia.io</a>.  
     
    To execute CloudUla APIs you will need your API Key for our Sandbox or Production 
    environments. Your can find your API Keys in your 
    <a href="javascript:alert('Imagine we just sent you to your account settings.')">
    Account Settings</a>.
     
    Please use the fictitious key <b>DEMO_KEY_FOR_ME</b> that was mentioned in 
    the Authentication section.
  version: 1.0.0
  title: API
  termsOfService: 'https://cloudula.io/terms/'
  contact:
    name: Support Team
    email: support@cloudula.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Servers
    description: Everything about your Servers
    externalDocs:
      description: Learn more about CloudUla
      url: 'https://www.cloudula.io'
  - name: Servers
    description: Everything about your Servers
    externalDocs:
      description: Learn more about CloudUla
      url: 'https://www.cloudula.io'
paths:
  /server:
    post:
      tags:
        - Servers
      summary: Add a new server
      description: >-
        Adds a server to the list of servers you wish to gather information about. 
        The server must physically exist in the CloudUla Datacenter. When staff at CloudUla 
        physically adds a server to the Datacenter the server will be added to your list of 
        servers for you by default. This POST may be neccessary should you DELETE the server 
        and wish to add it back in.
         
        An ID will be assigned to the server by this endpoint.
      operationId: addPet
      parameters:
        - name: api_key
          in: header
          required: true
          description: Try > DEMO_KEY_FOR_ME
          schema:
            type: string
      responses:
        '200':
          description: OK - The server was added
        '401':
          description: Invalid API Key - Unauthorized
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error - Not able to determine the exact error
      requestBody:
        $ref: '#/components/requestBodies/Pet'
    put:
      tags:
        - Servers
      summary: Update an existing server
      description: ''
      operationId: updateServer
      parameters:
        - name: api_key
          in: header
          required: true
          description: Try > DEMO_KEY_FOR_ME
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  /servers:
    get:
      tags:
        - Servers
      summary: List all servers
      description: >-
        A list of all servers associated with the api_key. Optionally a filter 
        can be applied to limit the list by the server status.
      operationId: findServersByStatus
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - online
                - down
                - maintentance
              default: down
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
  /equipment:
    get:
      tags:
        - Equipment
      summary: Finds equipment by tags
      description: >-
        Muliple tags can be provided with comma separated strings. 
      operationId: findPetsByTags
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: tags
          in: query
          description: >-
            Tag values that need to be considered for filter. Muliple tags can be provided 
            using a comma separated string. Example: ?tag=online,down,maintentance.
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - online
                - down
                - maintentance
              default: maintentance
      responses:
        '200':
          $ref: "#/components/responses/PetResponse"
        '400':
          description: Invalid tag value
      deprecated: true
  /server/{serverId}:
    get:
      tags:
        - Servers
      summary: Find server by ID
      description: Returns a single server
      operationId: getServerById
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: serverId
          in: path
          description: ID of server to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Server not found
    put:
      tags:
        - Servers
      summary: Updates a server with form data
      description: 'Update a server...'
      operationId: updateServerWithForm
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: serverId
          in: path
          description: ID of server to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the server
                  type: string
                status:
                  type: string
                  description: Status of the server
                  enum:
                    - online
                    - down
                    - maintentance
    delete:
      tags:
        - Servers
      summary: Deletes a server
      description: ''
      operationId: deleteServer
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: serverId
          in: path
          description: Server id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Server not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  responses:
    PetResponse:
      description: successful operation
      content:
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
  requestBodies:
    #UserArray:
    #  content:
    #    application/json:
    #      schema:
    #        type: array
    #        items:
    #          $ref: '#/components/schemas/User'
    #  description: List of user object
    #  required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        #application/xml:
        #  schema:
        #    $ref: '#/components/schemas/Pet'
      description: Server object to add to your list of servers.
      required: true
  securitySchemes:
    cloudula_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        #id:
        #  type: integer
        #  format: int64
        #category:
        #  $ref: '#/components/schemas/Category'
        name:
          type: string
          example: starship-001
        status:
          type: string
          description: Status of the server
          enum:
            - online
            - down
            - maintentance
      xml:
        name: Server